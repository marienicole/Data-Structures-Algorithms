# Implementation of quicksort in Python.
# Time Complexity:

# Quicksort is a divide-and-conquer method.
# Divide (or partition) array (list) into two parts, sort each independently.


array1 = [1533, 19, 368, 1079, 114, 448, 1376, 1731, 300, 1870, 1114, 193, 85,
          743, 1619, 1476, 1667, 1054, 1522, 1104, 1474, 587, 1411, 906, 1527,
          1117, 1391, 755, 520, 348, 1746, 1066, 511, 1231, 662, 1407, 137, 389,
          979, 121, 1594, 1824, 1609, 327, 1240, 827, 97, 1865, 584, 765]
array2 = [2, 156, 77, 160, 83, 159, 60, 48, 136, 74, 130, 37, 95, 128, 1, 192,
          53, 33, 105, 78, 147, 23, 195, 89, 30, 183, 3, 167, 133, 114, 12, 103,
          177, 144, 157, 44, 123, 102, 20, 187, 178, 68, 13, 164, 27, 165, 140,
          113, 172, 72, 108, 200, 119, 182, 58, 188, 179, 151, 31, 59, 181,
          67, 56, 86, 117, 41, 38, 65, 189, 173, 176, 186, 110, 97, 50, 131, 42,
          170, 17, 49, 70, 199, 191, 66, 18, 198, 166, 61, 138, 35, 146, 88, 98,
          99, 174, 148, 63, 112, 145, 120, 5, 94, 16, 57, 193, 111, 69, 9, 104,
          32, 185, 175, 71, 28, 15, 158, 169, 80, 54, 79, 125, 87, 62, 152, 92,
          161, 34, 39, 134, 118, 137, 101, 116, 129, 149, 154, 143, 45, 153, 171,
          46, 64, 19, 196, 126, 25, 96, 10, 127, 76]
array3 = [1787, 1855, 1273, 1942, 1704, 1374, 915, 1795, 1761, 510, 1702, 669,
          540, 702, 476, 423, 1482, 892, 1692, 535, 1335, 1141, 1064, 1572, 1863,
          1214, 1562, 1010, 1738, 1353, 1727, 1084, 697, 1884, 89, 1994, 346,
          1465, 157, 899, 1194, 1205, 534, 231, 978, 1771, 359, 1091, 234, 1857,
          395, 175, 1475, 1841, 878, 594, 1357, 136, 405, 1502, 1539, 1893, 137,
          1159, 1861, 164, 357, 4, 302, 1763, 1507, 1294, 251, 919, 1939, 371,
          1997, 100, 1133, 1356, 962, 1991, 1037, 1838, 1215, 1344, 593, 1847,
          1564, 1257, 1896, 685, 1093, 604, 1589, 1256, 13, 290, 143, 1870, 824,
          1708, 1619, 1973, 1766, 1644, 260, 99, 1823, 1338, 466, 1806, 247,
          1737, 886, 1637, 88, 140, 1774, 1739, 750, 380, 1323, 1193, 994, 1865,
          1980, 1529, 1981, 562, 358, 361, 1429, 1654, 224, 196, 1110, 1762,
          1686, 1092, 802, 852, 1226, 330, 1458, 1398, 107, 195, 85, 255, 482,
          23, 1111, 1926, 1918, 728, 1985, 306, 940, 1406, 218, 772, 1469, 283,
          1707, 462, 1993, 1466, 181, 1443, 273, 1933, 1354, 1286, 1602, 109,
          1998, 1525, 120, 777, 1370, 785, 1745, 655, 1984, 560, 51, 874, 185,
          896, 828, 436, 735, 1118, 914, 1962, 838, 45, 1526, 369, 1124, 1937,
          7, 1982, 630, 1948, 1811, 665, 1489, 265, 1268, 752, 1975, 8, 1952,
          1154, 575, 61, 666, 1349, 1164, 253, 160, 1114, 217, 236, 1343, 553,
          507, 1442, 857, 287, 264, 955, 921, 1971, 660, 793, 597, 1291, 1514,
          1592, 1368, 1580, 1501, 222, 1402, 1576, 881, 1425, 890, 1567, 238,
          370, 459, 1174, 38, 418, 595, 1142, 1255, 911, 1441, 1056, 267, 1403,
          935, 460, 574, 1919, 1664, 316, 990, 1675, 1345, 200, 672, 94, 1097,
          1289, 1706, 1748, 1965, 363, 1645, 1011, 168, 1150, 842, 274, 627, 84,
          601, 879, 1389, 1230, 125, 799, 851, 1624, 1060, 873, 1586, 1183, 1287,
          1382, 682, 1518, 602, 326, 60, 1040, 1571, 1649, 1512, 323, 1623, 1542,
          318, 408, 186, 293, 1798, 1342, 1360, 1537, 473, 858, 122, 508, 139,
          1882, 981, 498, 1125, 1725, 1009, 1655, 807, 250, 506, 1606, 1676,
          1904, 1272, 1384, 1642, 1930, 883, 199, 456, 596, 1524, 1877, 1950,
          1585, 158, 135, 1543, 1417, 284, 1944, 221, 426, 996, 528, 1553, 1575,
          1401, 126, 821, 98, 490, 351, 1044, 387, 1394, 1095, 1456, 455, 485,
          1249, 296, 1108, 760, 1464, 607, 1346, 1282, 1588, 1967, 1781, 1213,
          1963, 976, 1671, 435, 103, 1837, 1298]

def quicksort(array, low, high):
    if low < high:
        pivot = partition(array, low, high)
        quicksort(array, low, pivot-1)
        quicksort(array, pivot+1, high)


def partition(array, low, high):
    pivot = array[high]
    i = low - 1

    for j in range(low, high-1):
        if array[j] < pivot:
            i += 1
            swap(array, i, j)

    swap(array, i+1, high)

    return i+1

def swap(array, i, j):
    temp = array[i]
    array[i] = array[j]
    array[j] = temp



def main():
    quicksort(array1, 0, len(array1)-1)
    print(array1)

main()
